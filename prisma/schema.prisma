generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String   @map(name: "provider_account_id")
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now()) @map(name: "created_at")
  updatedAt         DateTime @default(now()) @map(name: "updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId], name: "user_id_idx")
  @@map(name: "accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map(name: "session_token")
  userId       String   @map(name: "user_id")
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], name: "user_id_idx")
  @@map(name: "sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map(name: "email_verified")
  image         String?
  eloRating     Float     @default(1500) @map(name: "elo_rating")
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @default(now()) @map(name: "updated_at")

  accounts Account[]
  sessions Session[]
  matches  UsersOnMatches[]
  Match    Match[]

  @@map(name: "users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map(name: "verification_tokens")
}

model Match {
  id              String      @id @default(cuid())
  teamAScore      Int         @map(name: "team_a_score")
  teamBScore      Int         @map(name: "team_b_score")
  status          MatchStatus @default(Pending)
  createdAt       DateTime    @default(now()) @map(name: "created_at")
  updatedAt       DateTime    @default(now()) @map(name: "updated_at")
  createdBy       User        @relation(fields: [createdByUserId], references: [id])
  createdByUserId String      @map(name: "created_by")

  users UsersOnMatches[]

  @@map(name: "matches")
  @@index([createdByUserId])
}

enum MatchStatus {
  Pending   @map("pending")
  Confirmed @map("confirmed")
  Rejected  @map("rejected")
}

model UsersOnMatches {
  user        User      @relation(fields: [userId], references: [id])
  userId      String    @map(name: "user_id")
  match       Match     @relation(fields: [matchId], references: [id])
  matchId     String    @map(name: "match_id")
  team        MatchTeam @default(TeamA)
  assignedAt  DateTime  @default(now()) @map(name: "assigned_at")
  eloSnapshot Float     @map(name: "elo_snapshot")

  @@id([userId, matchId])
  @@index([userId], name: "user_id_idx")
  @@index([matchId], name: "match_id_idx")
  @@map(name: "users_on_matches")
}

enum MatchTeam {
  TeamA @map("team_a")
  TeamB @map("team_b")
}
